# -*- coding: utf-8 -*-
"""Copy of Iris_dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10ZsDf-Oz0nw55naNYNr6kcTvklUZ7Rft

**BHARAT INTERN MACHINE LEARNING**

Name : MALISETTI RAMNARAYANA

Persuing : COMPUTER SCIENCE & ENGINEERING WITH ARTIFICIAL INTELLIGENCE & MACHINE LEARNING 3rd Year




Title of the project : IRIS CLASSIFICATION
"""

import pandas as pd
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
names = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'Class']

# Read dataset to pandas dataframe
df = pd.read_csv(url, names=names)
df

# Commented out IPython magic to ensure Python compatibility.
import missingno as ms
# %matplotlib inline
ms.matrix(df)

x=df.iloc[:,:-1]
y=df.iloc[:,-1]
x

print(x.shape,y.shape)

Y=pd.DataFrame(y)
Y

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,Y,test_size=20,random_state=1)
x_train

x_test

y_train

y_test

from sklearn.linear_model import LogisticRegression
lr=LogisticRegression()
lr.fit(x_train,y_train)

y_pred=lr.predict(x_test)
y_pred

from sklearn.metrics import accuracy_score
acc=accuracy_score(y_test,y_pred)
print("Accuracy of LR model: %.2f" % (acc*100),"%")

x.min(axis=0)
# x.max(axis=0)
# y.min(axis=0)
# y.max(axis=0)

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
x_scaled=scaler.fit_transform(x)
x1=pd.DataFrame(x_scaled)
x1
print(x_scaled.min(axis=0))
print(x_scaled.max(axis=0))

from sklearn.model_selection import train_test_split
x1_train,x1_test,y1_train,y1_test=train_test_split(x1,Y,test_size=0.2,random_state=1)
x1_train

from sklearn.linear_model import LogisticRegression
lr1=LogisticRegression()
lr1.fit(x1_train,y1_train)

y1_pred=lr1.predict(x1_test)
y1_pred

from sklearn.metrics import accuracy_score
acc1=accuracy_score(y1_test,y1_pred)
print("Accuracy of LR model: %.2f" % (acc1*100),"%")

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x1_scaled=sc.fit_transform(x)
x2=pd.DataFrame(x1_scaled)
x2
print(x1_scaled.min(axis=0))
print(x1_scaled.max(axis=0))

from sklearn.model_selection import train_test_split
x2_train,x2_test,y2_train,y2_test=train_test_split(x2,Y,test_size=0.2,random_state=1)
x2_train

from sklearn.linear_model import LogisticRegression
lr3=LogisticRegression()
lr3.fit(x2_train,y2_train)

y2_pred=lr3.predict(x2_test)
y2_pred

from sklearn.metrics import accuracy_score
acc2=accuracy_score(y2_test,y2_pred)
print("Accuracy of LR model: %.2f" % (acc2*100),"%")

from sklearn.model_selection import train_test_split
x3_train,x3_test,y3_train,y3_test=train_test_split(x,Y,test_size=30,random_state=1)
x3_train

from sklearn.linear_model import LogisticRegression
lr4=LogisticRegression()
lr4.fit(x3_train,y3_train)

y4_pred=lr4.predict(x3_test)
y4_pred

from sklearn.metrics import accuracy_score
acc4=accuracy_score(y3_test,y4_pred)
print("Accuracy of LR model: %.2f" % (acc4*100),"%")

from sklearn.model_selection import train_test_split
x4_train,x4_test,y4_train,y4_test=train_test_split(x,Y,test_size=0.5,random_state=1)
x4_train

from sklearn.linear_model import LogisticRegression
logisticRegr=LogisticRegression()
logisticRegr.fit(x4_train,y4_train)

y5_pred=logisticRegr.predict(x4_test)
print(y5_pred)

from sklearn.metrics import accuracy_score
acc5= accuracy_score(y4_test,y5_pred)
print("Accuracy of LR model: %.2f" % (acc5*100),"%")

print(x_train[:5])
print(x1_train[:5])

from collections import Counter
print(Counter(y))
print(Counter(y_train))
print(Counter(y_test))

from collections import Counter
print(Counter(y))
print(Counter(y1_train))
print(Counter(y1_test))